name: Telematics Login Check

on:
  workflow_dispatch:  # Allows manual and API triggers (via GCP)

concurrency:  # Prevent overlapping workflows
  group: telematics-check
  cancel-in-progress: false

jobs:
  run-script:
    runs-on: ubuntu-latest  # GitHub-hosted runner

    steps:
      # Step 1: Log workflow start time
      - name: Log workflow start time
        run: echo "Workflow started at $(date '+%Y-%m-%d %H:%M:%S')"

      # Step 2: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 3: Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 4: Install Chrome and ChromeDriver
      - name: Install Chrome and ChromeDriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: 'stable'

      # Step 5: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium

      # Step 6: Run the script
      - name: Run telematics login check
        env:
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        run: |
          echo "Starting Telematics login check at $(date '+%Y-%m-%d %H:%M:%S')"
          python telematics_check.py

      # Step 7: Upload logs and screenshots on failure
      - name: Upload logs and screenshots
        if: failure()  # Only runs if the previous step fails
        uses: actions/upload-artifact@v4
        with:
          name: telematics-logs-and-screenshots
          path: logs/
          if-no-files-found: ignore  # Prevent errors if logs folder is empty

      # Step 8: Log workflow completion
      - name: Log workflow completion
        run: echo "Workflow completed at $(date '+%Y-%m-%d %H:%M:%S')"
